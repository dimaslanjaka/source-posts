name: Post Update

on:
  schedule:
    # https://crontab.guru/#0_8_*_*_*
    - cron:  '0 8 * * *'
  push:
    branches:
      - posts
      - master # <-- just for test
  workflow_dispatch:

concurrency:
  # group: build-${{ github.event.push.number || github.event.pull_request.number || github.ref }}
  group: update-post-reusing-workflow-actions
  cancel-in-progress: true

jobs:
  run-other-workflows:
    env:
      NODE_OPTIONS: '--max_old_space_size=8192' #8192 4096 --expose-gc
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      YARN_CHECKSUM_BEHAVIOR: update
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      node_version: 18

    runs-on: ubuntu-latest

    name: trigger static-blog-generator actions
    steps:
      - uses: actions/checkout@v4
        name: checkout root project
        with:
          ref: master
          repository: dimaslanjaka/source-posts
          token: '${{ secrets.ACCESS_TOKEN }}'
      - uses: actions/checkout@v4
        name: checkout /posts
        with:
          ref: posts
          path: posts
          repository: dimaslanjaka/source-posts
          token: '${{ secrets.ACCESS_TOKEN }}'
      - name: update submodule
        run: bash -e ./bin/submodule-install
      - uses: actions/cache@v3
        id: cache
        name: init cache
        with:
          path: |
            **/tmp
            **/dist
            **/.yarn
            **/node_modules
          key: ${{ runner.os }}-${{ env.node_version }}
          restore-keys: |
            ${{ runner.os }}-${{ env.node_version }}
            ${{ runner.os }}-
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          check-latest: true
      - name: Set enviroment variables
        id: set-env
        shell: bash
        run: |
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          echo "${GITHUB_WORKSPACE}/node_modules/.bin" >> $GITHUB_PATH
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_OUTPUT
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_OUTPUT
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_OUTPUT
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_OUTPUT
          YARN_CURRENT=$(yarn -v)
          YARN_BERRY=3.2.1
          if [[ "ok" == "$(echo | awk "(${YARN_CURRENT} > ${YARN_BERRY}) { print \"ok\"; }")" ]]; then
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_ENV
            echo "CACHE_YARN=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          else
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
            echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_OUTPUT
          fi
          echo "architecture=$(getconf LONG_BIT)" >> $GITHUB_ENV
          if [ -f "package-lock.json" ]; then
              echo "PACKAGE-MANAGER=npm" >> $GITHUB_OUTPUT
              echo "PACKAGE-MANAGER=npm" >> $GITHUB_ENV
          else
              echo "PACKAGE-MANAGER=yarn" >> $GITHUB_OUTPUT
              echo "PACKAGE-MANAGER=yarn" >> $GITHUB_ENV
          fi
          unameOut="$(uname -s)"
          case "${unameOut}" in
              Linux*)     machine=linux;;
              Darwin*)    machine=mac;;
              CYGWIN*)    machine=cygwin;;
              MINGW*)     machine=mingw;;
              *)          machine="unknown:${unameOut}"
          esac
          echo "machine=$machine" >> $GITHUB_OUTPUT
          echo "machine=$machine" >> $GITHUB_ENV
      - run: npm i -g ts-node typescript hexo-cli
      - name: install project
        run: |
          touch yarn.lock
          YARN_CHECKSUM_BEHAVIOR=update yarn install
        shell: bash
      - run: cross-env-shell NODE_ENV=production node --experimental-specifier-resolution=node --loader ts-node/esm -r dotenv/config src/ci/check-other-ci.ts
        name: check static-blog-generator-hexo workflow run status
      - name: copy workflow to /posts
        run: cross-env-shell NODE_ENV=production node --experimental-specifier-resolution=node --loader ts-node/esm -r dotenv/config src/ci/copy-workflows-to-posts.ts
      - name: commit & push /posts
        working-directory: posts
        run: |
          git config --global user.name 'dimaslanjaka'
          git config --global user.email 'dimaslanjaka@gmail.com'
          git add .
          if [ $(git status --porcelain | wc -l) -gt "0" ]; then
            git commit -m "refactor: update workflows ${{ env.GITHUB_COMMIT_URL }}" -m "commit hash: ${{ env.GITHUB_SHA_SHORT }}" -m "commit url: ${{ env.GITHUB_COMMIT_URL }}" -m "runner: ${{ env.GITHUB_RUNNER_URL }}"
            git push
          fi
      - name: commit & push master
        run: |
          git config --global user.name 'dimaslanjaka'
          git config --global user.email 'dimaslanjaka@gmail.com'
          git add .
          if [ $(git status --porcelain | wc -l) -gt "0" ]; then
            git commit -m "chore: update posts ${{ env.GITHUB_COMMIT_URL }}" -m "commit hash: ${{ env.GITHUB_SHA_SHORT }}" -m "commit url: ${{ env.GITHUB_COMMIT_URL }}" -m "runner: ${{ env.GITHUB_RUNNER_URL }}"
            git push
          fi
      - name: Trigger Workflow
        run: cross-env-shell NODE_ENV=production node --experimental-specifier-resolution=node --loader ts-node/esm -r dotenv/config src/ci/dispatch-workflows.ts
